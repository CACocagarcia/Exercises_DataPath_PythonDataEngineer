{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMb53cmeHFHZS1kWYXOYIZx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Environment SetUp"],"metadata":{"id":"4agQfJDdV_ZC"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y0jK-6jpV5a1","executionInfo":{"status":"ok","timestamp":1692675982615,"user_tz":360,"elapsed":28333,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"d7d36153-31f8-4774-8ffc-c2cf6809f334"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["!apt-get install openjdk-8-jdk-headless -qq > /dev/ull\n","!wget -q  https://archive.apache.org/dist/spark/spark-3.2.3/spark-3.2.3-bin-hadoop3.2.tgz"],"metadata":{"id":"7sLQsmU_WFLX","executionInfo":{"status":"ok","timestamp":1692676007749,"user_tz":360,"elapsed":25158,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# descompremir la version de spark\n","!tar xf spark-3.2.3-bin-hadoop3.2.tgz"],"metadata":{"id":"rafaF1YBWGyN","executionInfo":{"status":"ok","timestamp":1692676012606,"user_tz":360,"elapsed":4882,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.2.3-bin-hadoop3.2\""],"metadata":{"id":"Eyd4ozXkWKLb","executionInfo":{"status":"ok","timestamp":1692676012607,"user_tz":360,"elapsed":25,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Instalar la librería findspark\n","!pip install -q findspark"],"metadata":{"id":"P2lkNR4AWLzE","executionInfo":{"status":"ok","timestamp":1692676018006,"user_tz":360,"elapsed":5422,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Instalar pyspark\n","!pip install -q pyspark"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cy7WyXADWNsV","executionInfo":{"status":"ok","timestamp":1692676070154,"user_tz":360,"elapsed":52157,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"28d18b5b-ebfe-4b3c-f03f-e4bd199cf602"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m310.8/310.8 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}]},{"cell_type":"code","source":["import findspark\n","findspark.init()\n","import pandas as pd\n","import numpy as np\n","import pyspark\n","import math"],"metadata":{"id":"X7NSw3f-WSPn","executionInfo":{"status":"ok","timestamp":1692676070431,"user_tz":360,"elapsed":313,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["import findspark\n","findspark.init()\n","from pyspark.sql import SparkSession\n","\n","spark = SparkSession.builder.getOrCreate()\n","sc = spark.sparkContext"],"metadata":{"id":"qPsppYtGWQQL","executionInfo":{"status":"ok","timestamp":1692676082058,"user_tz":360,"elapsed":11634,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["**Ejercicio 1** Cree un RDD llamado importes a partir del archivo adjunto a esta lección como recurso."],"metadata":{"id":"A_y5jqbUYLvF"}},{"cell_type":"code","source":["'''\n","  In this block of Code I'm reading and extracting\n","  each line of the file and saving it into the file_data variable\n","\n","  The Type is a List\n","\n","  Using the List I can create a RDD\n","'''\n","file = open(\"/content/drive/MyDrive/Python Data Engineer/Sesion2/data/num.txt\")\n","file_data = file.readlines()\n","file.close()\n","# len(file_data)\n","# print(file_data) #List will contain string values like: '70\\n', '69\\n', '16\\n', '80\\n', '85\\n', '81\\n' - going to remove the \\n\n","\n","for i in range(len(file_data)):\n","  file_data[i] = file_data[i].replace('\\n', '')\n","  file_data[i] = int(file_data[i])\n","\n","print(file_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jCIL8gY4YUkx","executionInfo":{"status":"ok","timestamp":1692677196752,"user_tz":360,"elapsed":192,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"4326fb15-d245-4cdd-e21b-d5ca774a7ebf"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["[70, 69, 16, 80, 85, 81, 93, 5, 78, 21, 13, 77, 93, 31, 16, 84, 64, 29, 45, 24, 64, 31, 2, 55, 51, 92, 72, 84, 22, 50, 17, 5, 96, 63, 67, 82, 52, 38, 86, 23, 90, 96, 53, 95, 10, 28, 75, 72, 67, 82, 40, 60, 34, 26, 47, 55, 10, 46, 86, 46, 64, 37, 31, 43, 74, 44, 87, 7, 54, 95, 43, 79, 79, 53, 62, 13, 37, 45, 40, 81, 50, 41, 30, 81, 27, 27, 49, 97, 73, 99, 77, 64, 47, 68, 8, 79, 13, 49, 75, 2, 23, 94, 21, 2, 10, 9, 19, 75, 7, 27, 55, 38, 10, 39, 73, 21, 81, 1, 61, 62, 5, 91, 68, 35, 81, 91, 34, 24, 63, 61, 32, 11, 74, 43, 98, 18, 25, 33, 31, 32, 42, 97, 11, 28, 14, 49, 34, 78, 50, 76, 25, 79, 61, 15, 57, 60, 61, 52, 94, 32, 30, 71, 16, 32, 26, 30, 42, 36, 45, 1, 91, 47, 19, 43, 71, 41, 95, 12, 64, 95, 51, 39, 55, 99, 12, 98, 97, 37, 25, 45, 36, 13, 63, 81, 16, 56, 33, 61, 31, 39, 84, 30, 97, 37, 29, 94, 76, 39, 62, 12, 97, 90, 50, 85, 25, 28, 35, 63, 25, 56, 43, 18, 57, 20, 62, 51, 63, 27, 82, 71, 24, 7, 70]\n"]}]},{"cell_type":"code","source":["rdd_importes = sc.parallelize(file_data) #Creating RDD from List\n","# rdd_primaryk_values.collect()"],"metadata":{"id":"s1_QlnqOYeA8","executionInfo":{"status":"ok","timestamp":1692677198772,"user_tz":360,"elapsed":266,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["**Ejercicio 1A** ¿Cuántos registros tiene el RDD importes?"],"metadata":{"id":"dwGuQsdfY5px"}},{"cell_type":"code","source":["rdd_importes.count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LH1pMGnWYmI7","executionInfo":{"status":"ok","timestamp":1692677251518,"user_tz":360,"elapsed":434,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"6d091804-af7f-4ee3-b2d7-a52c19c7498f"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["233"]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["**Ejercicio 1B** ¿Cuál es el valor mínimo y máximo del RDD importes?"],"metadata":{"id":"EnHfCBZlZQIU"}},{"cell_type":"code","source":["min = rdd_importes.min()\n","max = rdd_importes.max()\n","\n","print(f\"The minimum rdd value is {min}\")\n","print(f\"The maximum rdd value is {max}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UZEUi0HdZT4Y","executionInfo":{"status":"ok","timestamp":1692677205005,"user_tz":360,"elapsed":705,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"9b689fc1-6f12-417f-ae48-7f81d2723f4a"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["The minimum rdd value is 1\n","The maximum rdd value is 99\n"]}]},{"cell_type":"markdown","source":["Ejercicio 1C Cree un RDD top15 que contenga los 15 mayores valores del RDD importes. Tenga en cuenta que pueden repetirse los valores. Por último, escriba el RDD top15 como archivo de texto en la carpeta data/salida."],"metadata":{"id":"Qaq8kqqbZnBX"}},{"cell_type":"code","source":["# Sorting Files in Desc Order\n","file_data.sort(reverse=True)\n","\n","# Grabbing Top 15 Values\n","top15 = file_data[0:15]\n","\n","# Creating Top 15 RDD\n","rdd_top15= sc.parallelize(top15)\n","rdd_top15.collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1XdyYIzxai94","executionInfo":{"status":"ok","timestamp":1692678680729,"user_tz":360,"elapsed":190,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"87ba0608-2e86-4afb-878d-8cf9c5164cb4"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[99, 99, 98, 98, 97, 97, 97, 97, 97, 96, 96, 95, 95, 95, 95]"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["rdd_top15.saveAsTextFile('/content/drive/MyDrive/Python Data Engineer/Sesion2/data/rddtop15.txt')"],"metadata":{"id":"l0wWy7VfgyuA","executionInfo":{"status":"ok","timestamp":1692678874297,"user_tz":360,"elapsed":2051,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":["**Ejercicio 2** Cree una función llamada factorial que calcule el factorial de un número dado como parámetro. Utilice RDDs para el cálculo."],"metadata":{"id":"HVJXI1qthjIN"}},{"cell_type":"code","source":["import math"],"metadata":{"id":"-aolRUlkhi0x","executionInfo":{"status":"ok","timestamp":1692678971047,"user_tz":360,"elapsed":7,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["rdd_factorial = rdd_top15.map(lambda x:(x, math.factorial(x)))\n","rdd_factorial.collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wDP4lxSDh2aR","executionInfo":{"status":"ok","timestamp":1692679069850,"user_tz":360,"elapsed":637,"user":{"displayName":"Carlos Coca","userId":"18148525189835533262"}},"outputId":"a797fdf9-9e1b-4570-8042-de59dc7cf560"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(99,\n","  933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000),\n"," (99,\n","  933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000),\n"," (98,\n","  9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000),\n"," (98,\n","  9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000),\n"," (97,\n","  96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000),\n"," (97,\n","  96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000),\n"," (97,\n","  96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000),\n"," (97,\n","  96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000),\n"," (97,\n","  96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000),\n"," (96,\n","  991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000),\n"," (96,\n","  991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000),\n"," (95,\n","  10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000),\n"," (95,\n","  10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000),\n"," (95,\n","  10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000),\n"," (95,\n","  10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000)]"]},"metadata":{},"execution_count":57}]}]}